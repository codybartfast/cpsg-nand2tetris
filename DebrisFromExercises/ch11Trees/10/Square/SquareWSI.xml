<class>
  <keyword> class </keyword>
  <identifier type="Square" beingDefined="True" kind="STATIC" category="class" index="0"> Square </identifier>
  <symbol> { </symbol>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier type="int" beingDefined="True" kind="FIELD" category="variable" index="0"> x </identifier>
    <symbol> , </symbol>
    <identifier type="int" beingDefined="True" kind="FIELD" category="variable" index="1"> y </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier type="int" beingDefined="True" kind="FIELD" category="variable" index="2"> size </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <subroutineDec>
    <keyword> constructor </keyword>
    <identifier type="Square" beingDefined="False" kind="STATIC" category="class" index="0"> Square </identifier>
    <identifier type="Square" beingDefined="True" kind="STATIC" category="subroutine" index="1"> new </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier type="int" beingDefined="True" kind="ARG" category="arg" index="0"> Ax </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier type="int" beingDefined="True" kind="ARG" category="arg" index="1"> Ay </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier type="int" beingDefined="True" kind="ARG" category="arg" index="2"> Asize </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="0"> x </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier type="int" beingDefined="False" kind="ARG" category="arg" index="0"> Ax </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="1"> y </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier type="int" beingDefined="False" kind="ARG" category="arg" index="1"> Ay </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="2"> size </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier type="int" beingDefined="False" kind="ARG" category="arg" index="2"> Asize </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier type="void" beingDefined="False" kind="STATIC" category="subroutine" index="3"> draw </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <keyword> this </keyword>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier type="void" beingDefined="True" kind="STATIC" category="subroutine" index="2"> dispose </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> Memory </identifier>
          <symbol> . </symbol>
          <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> deAlloc </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <keyword> this </keyword>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier type="void" beingDefined="True" kind="STATIC" category="subroutine" index="3"> draw </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> Screen </identifier>
          <symbol> . </symbol>
          <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> setColor </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <keyword> true </keyword>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> Screen </identifier>
          <symbol> . </symbol>
          <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> drawRectangle </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="0"> x </identifier>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="1"> y </identifier>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="0"> x </identifier>
              </term>
              <symbol> + </symbol>
              <term>
                <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="2"> size </identifier>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="1"> y </identifier>
              </term>
              <symbol> + </symbol>
              <term>
                <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="2"> size </identifier>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier type="void" beingDefined="True" kind="STATIC" category="subroutine" index="4"> erase </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> Screen </identifier>
          <symbol> . </symbol>
          <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> setColor </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <keyword> false </keyword>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> Screen </identifier>
          <symbol> . </symbol>
          <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> drawRectangle </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="0"> x </identifier>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="1"> y </identifier>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="0"> x </identifier>
              </term>
              <symbol> + </symbol>
              <term>
                <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="2"> size </identifier>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="1"> y </identifier>
              </term>
              <symbol> + </symbol>
              <term>
                <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="2"> size </identifier>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier type="void" beingDefined="True" kind="STATIC" category="subroutine" index="5"> incSize </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="1"> y </identifier>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="2"> size </identifier>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
                <symbol> &lt; </symbol>
                <term>
                  <integerConstant> 254 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
            <symbol> &amp; </symbol>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="0"> x </identifier>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="2"> size </identifier>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
                <symbol> &lt; </symbol>
                <term>
                  <integerConstant> 510 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <identifier type="void" beingDefined="False" kind="STATIC" category="subroutine" index="4"> erase </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="2"> size </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="2"> size </identifier>
                </term>
                <symbol> + </symbol>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier type="void" beingDefined="False" kind="STATIC" category="subroutine" index="3"> draw </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier type="void" beingDefined="True" kind="STATIC" category="subroutine" index="6"> decSize </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="2"> size </identifier>
            </term>
            <symbol> &gt; </symbol>
            <term>
              <integerConstant> 2 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <identifier type="void" beingDefined="False" kind="STATIC" category="subroutine" index="4"> erase </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="2"> size </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="2"> size </identifier>
                </term>
                <symbol> - </symbol>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier type="void" beingDefined="False" kind="STATIC" category="subroutine" index="3"> draw </identifier>
              <symbol> ( </symbol>
              <expressionList>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier type="void" beingDefined="True" kind="STATIC" category="subroutine" index="7"> moveUp </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="1"> y </identifier>
            </term>
            <symbol> &gt; </symbol>
            <term>
              <integerConstant> 1 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> Screen </identifier>
              <symbol> . </symbol>
              <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> setColor </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <keyword> false </keyword>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> Screen </identifier>
              <symbol> . </symbol>
              <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> drawRectangle </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="0"> x </identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <symbol> ( </symbol>
                    <expression>
                      <term>
                        <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="1"> y </identifier>
                      </term>
                      <symbol> + </symbol>
                      <term>
                        <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="2"> size </identifier>
                      </term>
                    </expression>
                    <symbol> ) </symbol>
                  </term>
                  <symbol> - </symbol>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="0"> x </identifier>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="2"> size </identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="1"> y </identifier>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="2"> size </identifier>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="1"> y </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="1"> y </identifier>
                </term>
                <symbol> - </symbol>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> Screen </identifier>
              <symbol> . </symbol>
              <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> setColor </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <keyword> true </keyword>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> Screen </identifier>
              <symbol> . </symbol>
              <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> drawRectangle </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="0"> x </identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="1"> y </identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="0"> x </identifier>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="2"> size </identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="1"> y </identifier>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier type="void" beingDefined="True" kind="STATIC" category="subroutine" index="8"> moveDown </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="1"> y </identifier>
                </term>
                <symbol> + </symbol>
                <term>
                  <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="2"> size </identifier>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
            <symbol> &lt; </symbol>
            <term>
              <integerConstant> 254 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> Screen </identifier>
              <symbol> . </symbol>
              <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> setColor </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <keyword> false </keyword>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> Screen </identifier>
              <symbol> . </symbol>
              <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> drawRectangle </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="0"> x </identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="1"> y </identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="0"> x </identifier>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="2"> size </identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="1"> y </identifier>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="1"> y </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="1"> y </identifier>
                </term>
                <symbol> + </symbol>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> Screen </identifier>
              <symbol> . </symbol>
              <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> setColor </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <keyword> true </keyword>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> Screen </identifier>
              <symbol> . </symbol>
              <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> drawRectangle </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="0"> x </identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <symbol> ( </symbol>
                    <expression>
                      <term>
                        <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="1"> y </identifier>
                      </term>
                      <symbol> + </symbol>
                      <term>
                        <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="2"> size </identifier>
                      </term>
                    </expression>
                    <symbol> ) </symbol>
                  </term>
                  <symbol> - </symbol>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="0"> x </identifier>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="2"> size </identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="1"> y </identifier>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="2"> size </identifier>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier type="void" beingDefined="True" kind="STATIC" category="subroutine" index="9"> moveLeft </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="0"> x </identifier>
            </term>
            <symbol> &gt; </symbol>
            <term>
              <integerConstant> 1 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> Screen </identifier>
              <symbol> . </symbol>
              <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> setColor </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <keyword> false </keyword>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> Screen </identifier>
              <symbol> . </symbol>
              <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> drawRectangle </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <symbol> ( </symbol>
                    <expression>
                      <term>
                        <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="0"> x </identifier>
                      </term>
                      <symbol> + </symbol>
                      <term>
                        <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="2"> size </identifier>
                      </term>
                    </expression>
                    <symbol> ) </symbol>
                  </term>
                  <symbol> - </symbol>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="1"> y </identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="0"> x </identifier>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="2"> size </identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="1"> y </identifier>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="2"> size </identifier>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="0"> x </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="0"> x </identifier>
                </term>
                <symbol> - </symbol>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> Screen </identifier>
              <symbol> . </symbol>
              <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> setColor </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <keyword> true </keyword>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> Screen </identifier>
              <symbol> . </symbol>
              <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> drawRectangle </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="0"> x </identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="1"> y </identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="0"> x </identifier>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="1"> y </identifier>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="2"> size </identifier>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier type="void" beingDefined="True" kind="STATIC" category="subroutine" index="10"> moveRight </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="0"> x </identifier>
                </term>
                <symbol> + </symbol>
                <term>
                  <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="2"> size </identifier>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
            <symbol> &lt; </symbol>
            <term>
              <integerConstant> 510 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <doStatement>
              <keyword> do </keyword>
              <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> Screen </identifier>
              <symbol> . </symbol>
              <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> setColor </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <keyword> false </keyword>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> Screen </identifier>
              <symbol> . </symbol>
              <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> drawRectangle </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="0"> x </identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="1"> y </identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="0"> x </identifier>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="1"> y </identifier>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="2"> size </identifier>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="0"> x </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="0"> x </identifier>
                </term>
                <symbol> + </symbol>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> Screen </identifier>
              <symbol> . </symbol>
              <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> setColor </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <keyword> true </keyword>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
            <doStatement>
              <keyword> do </keyword>
              <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> Screen </identifier>
              <symbol> . </symbol>
              <identifier type="" beingDefined="False" kind="NONE" category="" index="0"> drawRectangle </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <symbol> ( </symbol>
                    <expression>
                      <term>
                        <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="0"> x </identifier>
                      </term>
                      <symbol> + </symbol>
                      <term>
                        <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="2"> size </identifier>
                      </term>
                    </expression>
                    <symbol> ) </symbol>
                  </term>
                  <symbol> - </symbol>
                  <term>
                    <integerConstant> 1 </integerConstant>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="1"> y </identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="0"> x </identifier>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="2"> size </identifier>
                  </term>
                </expression>
                <symbol> , </symbol>
                <expression>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="1"> y </identifier>
                  </term>
                  <symbol> + </symbol>
                  <term>
                    <identifier type="int" beingDefined="False" kind="FIELD" category="variable" index="2"> size </identifier>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
              <symbol> ; </symbol>
            </doStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>

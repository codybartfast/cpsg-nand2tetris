// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * Graphic screen library.
 */
class Screen {

		static int screen;
		static boolean color;
		static int colCount;
		static int rowCount;
		static int bytesPerRow;

    /** Initializes the Screen. */
    function void init() {
    	let screen = 16384;
    	let color = true;
    	let colCount = 512;
    	let rowCount = 256;
    	let bytesPerRow = colCount / 16;
    	return;
    }

    /** Erases the whole screen. */
    function void clearScreen() {
    	var int addr;
    	var int end;
    	let addr = screen;
    	let end = screen + (rowCount * bytesPerRow);
    	while(addr < end){
    		do Memory.poke(addr, 0);
    		let addr = addr + 1;
    	}
    	return;
    }

    /** Sets the color to be used in further draw commands
     *  where white = false, black = true. */
    function void setColor(boolean b) {
    	let color = b;
    	return;
    }

    /** Draws the (x, y) pixel. */
    function void drawPixel(int x, int y) {
    	var int addr;
    	var int bit;
    	var int byte;
    	var int i;
     	
    	let addr = screen + (y * bytesPerRow) + (x / 16);

			let bit = x & 15;
			let i = 0;
			let byte = 1;
			while(i < bit){
				let byte = byte + byte;
				let i = i + 1;
			}
			if(color){
    		let byte = byte | Memory.peek(addr);
    	}
    	else{
    		let byte = ~(byte) & Memory.peek(addr);
    	}
    	do Memory.poke(addr, byte);
    	return;
    }

    /** Draws a line from (x1, y1) to (x2, y2). */
    function void drawLine(int x1, int y1, int x2, int y2) {
    	var int x, xEnd, y, yEnd;
    	var int dx, dy;
    	var int a, b;
    	var int bInverter;
    	
    	if(~(x1 > x2)){
    		let x = x1;
    		let xEnd = x2;
    		let y = y1;
    		let yEnd = y2;
    	}
    	else{
				let x = x2;
				let xEnd = x1;
				let y = y2;
				let yEnd = y1;
    	}
    	let dx = xEnd - x;
    	let dy = Math.abs(yEnd - y);
     	if(yEnd < y){ let bInverter = -1; } else { let bInverter = 1; }
   		
   		while( ~((a > dx) | (b > dy))){
   			do Screen.drawPixel(x + a, y + (b * bInverter));
   			if((dy = 0) | ((a * dy) < (b * dx))){
   				let a = a + 1;
   			}
   			else{
   				let b = b + 1;
   			}
   		}
  	
    	return;
    }

    /** Draws a filled rectangle where the top left corner
     *  is (x1, y1) and the bottom right corner is (x2, y2). */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
			var int x, xEnd;
			if(x2 > x1){
				let x = x1;
				let xEnd = x2;
			}
			else{
				let x = x2;
				let xEnd = x1;
			}
			while(x < xEnd){
				do Screen.drawLine(x, y1, x, y2);
				let x = x + 1;
			}
    	return;
    }

    /** Draws a filled circle of radius r around (cx, cy). */
    function void drawCircle(int cx, int cy, int r) {
    	var int zx, zy, a, b, x, y, xDif, yDif, diam, rSqr;
    	
    	let zx = cx - r;
    	let zy = cy - r;
    	let diam = 2 * r;
    	let rSqr = r * r;
    	
    	while(a < diam){
    		let b = 0;
    		while(b < diam){
    			let x = zx + a;
    			let y = zy + b;
    			let xDif = x - cx;
    			let yDif = y - cy;
    			if( ((xDif * xDif) + (yDif * yDif)) > rSqr){}
    			else{
    				do Screen.drawPixel(x, y);
    			}
    			let b = b + 1;
    		}
    		let a = a + 1;
    	}
    	
     	return;
   }
}

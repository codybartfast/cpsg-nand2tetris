<class>
  <keyword> class </keyword>
  <identifier kind="NONE" type="Ball" index="0"> Ball </identifier>
  <symbol> { </symbol>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier kind="FIELD" type="int" index="0"> x </identifier>
    <symbol> , </symbol>
    <identifier kind="FIELD" type="int" index="1"> y </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier kind="FIELD" type="int" index="2"> lengthx </identifier>
    <symbol> , </symbol>
    <identifier kind="FIELD" type="int" index="3"> lengthy </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier kind="FIELD" type="int" index="4"> d </identifier>
    <symbol> , </symbol>
    <identifier kind="FIELD" type="int" index="5"> straightD </identifier>
    <symbol> , </symbol>
    <identifier kind="FIELD" type="int" index="6"> diagonalD </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> boolean </keyword>
    <identifier kind="FIELD" type="boolean" index="7"> invert </identifier>
    <symbol> , </symbol>
    <identifier kind="FIELD" type="boolean" index="8"> positivex </identifier>
    <symbol> , </symbol>
    <identifier kind="FIELD" type="boolean" index="9"> positivey </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier kind="FIELD" type="int" index="10"> leftWall </identifier>
    <symbol> , </symbol>
    <identifier kind="FIELD" type="int" index="11"> rightWall </identifier>
    <symbol> , </symbol>
    <identifier kind="FIELD" type="int" index="12"> topWall </identifier>
    <symbol> , </symbol>
    <identifier kind="FIELD" type="int" index="13"> bottomWall </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <classVarDec>
    <keyword> field </keyword>
    <keyword> int </keyword>
    <identifier kind="FIELD" type="int" index="14"> wall </identifier>
    <symbol> ; </symbol>
  </classVarDec>
  <subroutineDec VarCount=0 FieldCount=15>
    <keyword> constructor </keyword>
    <identifier kind="NONE" type="" index="0"> Ball </identifier>
    <identifier kind="NONE" type="Ball" index="0"> new </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier kind="ARG" type="int" index="0"> Ax </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier kind="ARG" type="int" index="1"> Ay </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier kind="ARG" type="int" index="2"> AleftWall </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier kind="ARG" type="int" index="3"> ArightWall </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier kind="ARG" type="int" index="4"> AtopWall </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier kind="ARG" type="int" index="5"> AbottomWall </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier kind="FIELD" type="int" index="0"> x </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier kind="ARG" type="int" index="0"> Ax </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier kind="FIELD" type="int" index="1"> y </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier kind="ARG" type="int" index="1"> Ay </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier kind="FIELD" type="int" index="10"> leftWall </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier kind="ARG" type="int" index="2"> AleftWall </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier kind="FIELD" type="int" index="11"> rightWall </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier kind="ARG" type="int" index="3"> ArightWall </identifier>
            </term>
            <symbol> - </symbol>
            <term>
              <integerConstant> 6 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier kind="FIELD" type="int" index="12"> topWall </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier kind="ARG" type="int" index="4"> AtopWall </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier kind="FIELD" type="int" index="13"> bottomWall </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier kind="ARG" type="int" index="5"> AbottomWall </identifier>
            </term>
            <symbol> - </symbol>
            <term>
              <integerConstant> 6 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier kind="FIELD" type="int" index="14"> wall </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier kind="NONE" type="" index="0"> show </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <keyword> this </keyword>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec VarCount=0>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier kind="NONE" type="void" index="0"> dispose </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier kind="NONE" type="" index="0"> Memory </identifier>
          <symbol> . </symbol>
          <identifier kind="NONE" type="" index="0"> deAlloc </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <keyword> this </keyword>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec VarCount=0>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier kind="NONE" type="void" index="0"> show </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier kind="NONE" type="" index="0"> Screen </identifier>
          <symbol> . </symbol>
          <identifier kind="NONE" type="" index="0"> setColor </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <keyword> true </keyword>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier kind="NONE" type="" index="0"> draw </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec VarCount=0>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier kind="NONE" type="void" index="0"> hide </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier kind="NONE" type="" index="0"> Screen </identifier>
          <symbol> . </symbol>
          <identifier kind="NONE" type="" index="0"> setColor </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <keyword> false </keyword>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier kind="NONE" type="" index="0"> draw </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec VarCount=0>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier kind="NONE" type="void" index="0"> draw </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier kind="NONE" type="" index="0"> Screen </identifier>
          <symbol> . </symbol>
          <identifier kind="NONE" type="" index="0"> drawRectangle </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier kind="FIELD" type="int" index="0"> x </identifier>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier kind="FIELD" type="int" index="1"> y </identifier>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier kind="FIELD" type="int" index="0"> x </identifier>
              </term>
              <symbol> + </symbol>
              <term>
                <integerConstant> 5 </integerConstant>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier kind="FIELD" type="int" index="1"> y </identifier>
              </term>
              <symbol> + </symbol>
              <term>
                <integerConstant> 5 </integerConstant>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec VarCount=0>
    <keyword> method </keyword>
    <keyword> int </keyword>
    <identifier kind="NONE" type="int" index="0"> getLeft </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <identifier kind="FIELD" type="int" index="0"> x </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec VarCount=0>
    <keyword> method </keyword>
    <keyword> int </keyword>
    <identifier kind="NONE" type="int" index="0"> getRight </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <identifier kind="FIELD" type="int" index="0"> x </identifier>
            </term>
            <symbol> + </symbol>
            <term>
              <integerConstant> 5 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec VarCount=3>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier kind="NONE" type="void" index="0"> setDestination </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier kind="ARG" type="int" index="1"> destx </identifier>
      <symbol> , </symbol>
      <keyword> int </keyword>
      <identifier kind="ARG" type="int" index="2"> desty </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier kind="VAR" type="int" index="0"> dx </identifier>
        <symbol> , </symbol>
        <identifier kind="VAR" type="int" index="1"> dy </identifier>
        <symbol> , </symbol>
        <identifier kind="VAR" type="int" index="2"> temp </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier kind="FIELD" type="int" index="2"> lengthx </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier kind="ARG" type="int" index="1"> destx </identifier>
            </term>
            <symbol> - </symbol>
            <term>
              <identifier kind="FIELD" type="int" index="0"> x </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier kind="FIELD" type="int" index="3"> lengthy </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier kind="ARG" type="int" index="2"> desty </identifier>
            </term>
            <symbol> - </symbol>
            <term>
              <identifier kind="FIELD" type="int" index="1"> y </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier kind="VAR" type="int" index="0"> dx </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier kind="NONE" type="" index="0"> Math </identifier>
              <symbol> . </symbol>
              <identifier kind="NONE" type="" index="0"> abs </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier kind="FIELD" type="int" index="2"> lengthx </identifier>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier kind="VAR" type="int" index="1"> dy </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier kind="NONE" type="" index="0"> Math </identifier>
              <symbol> . </symbol>
              <identifier kind="NONE" type="" index="0"> abs </identifier>
              <symbol> ( </symbol>
              <expressionList>
                <expression>
                  <term>
                    <identifier kind="FIELD" type="int" index="3"> lengthy </identifier>
                  </term>
                </expression>
              </expressionList>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier kind="FIELD" type="boolean" index="7"> invert </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier kind="VAR" type="int" index="0"> dx </identifier>
                </term>
                <symbol> &lt; </symbol>
                <term>
                  <identifier kind="VAR" type="int" index="1"> dy </identifier>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier kind="FIELD" type="boolean" index="7"> invert </identifier>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier kind="VAR" type="int" index="2"> temp </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier kind="VAR" type="int" index="0"> dx </identifier>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier kind="VAR" type="int" index="0"> dx </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier kind="VAR" type="int" index="1"> dy </identifier>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier kind="VAR" type="int" index="1"> dy </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier kind="VAR" type="int" index="2"> temp </identifier>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier kind="FIELD" type="boolean" index="8"> positivex </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier kind="FIELD" type="int" index="1"> y </identifier>
                    </term>
                    <symbol> &lt; </symbol>
                    <term>
                      <identifier kind="ARG" type="int" index="2"> desty </identifier>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier kind="FIELD" type="boolean" index="9"> positivey </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier kind="FIELD" type="int" index="0"> x </identifier>
                    </term>
                    <symbol> &lt; </symbol>
                    <term>
                      <identifier kind="ARG" type="int" index="1"> destx </identifier>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier kind="FIELD" type="boolean" index="8"> positivex </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier kind="FIELD" type="int" index="0"> x </identifier>
                    </term>
                    <symbol> &lt; </symbol>
                    <term>
                      <identifier kind="ARG" type="int" index="1"> destx </identifier>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier kind="FIELD" type="boolean" index="9"> positivey </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier kind="FIELD" type="int" index="1"> y </identifier>
                    </term>
                    <symbol> &lt; </symbol>
                    <term>
                      <identifier kind="ARG" type="int" index="2"> desty </identifier>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier kind="FIELD" type="int" index="4"> d </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
                <symbol> * </symbol>
                <term>
                  <identifier kind="VAR" type="int" index="1"> dy </identifier>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
            <symbol> - </symbol>
            <term>
              <identifier kind="VAR" type="int" index="0"> dx </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier kind="FIELD" type="int" index="5"> straightD </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 2 </integerConstant>
            </term>
            <symbol> * </symbol>
            <term>
              <identifier kind="VAR" type="int" index="1"> dy </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier kind="FIELD" type="int" index="6"> diagonalD </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <integerConstant> 2 </integerConstant>
            </term>
            <symbol> * </symbol>
            <term>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier kind="VAR" type="int" index="1"> dy </identifier>
                </term>
                <symbol> - </symbol>
                <term>
                  <identifier kind="VAR" type="int" index="0"> dx </identifier>
                </term>
              </expression>
              <symbol> ) </symbol>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec VarCount=0>
    <keyword> method </keyword>
    <keyword> int </keyword>
    <identifier kind="NONE" type="int" index="0"> move </identifier>
    <symbol> ( </symbol>
    <parameterList>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <statements>
        <doStatement>
          <keyword> do </keyword>
          <identifier kind="NONE" type="" index="0"> hide </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier kind="FIELD" type="int" index="4"> d </identifier>
            </term>
            <symbol> &lt; </symbol>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier kind="FIELD" type="int" index="4"> d </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier kind="FIELD" type="int" index="4"> d </identifier>
                </term>
                <symbol> + </symbol>
                <term>
                  <identifier kind="FIELD" type="int" index="5"> straightD </identifier>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier kind="FIELD" type="int" index="4"> d </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier kind="FIELD" type="int" index="4"> d </identifier>
                </term>
                <symbol> + </symbol>
                <term>
                  <identifier kind="FIELD" type="int" index="6"> diagonalD </identifier>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier kind="FIELD" type="boolean" index="9"> positivey </identifier>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <ifStatement>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier kind="FIELD" type="boolean" index="7"> invert </identifier>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier kind="FIELD" type="int" index="0"> x </identifier>
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <identifier kind="FIELD" type="int" index="0"> x </identifier>
                        </term>
                        <symbol> + </symbol>
                        <term>
                          <integerConstant> 4 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                  </statements>
                  <symbol> } </symbol>
                  <keyword> else </keyword>
                  <symbol> { </symbol>
                  <statements>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier kind="FIELD" type="int" index="1"> y </identifier>
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <identifier kind="FIELD" type="int" index="1"> y </identifier>
                        </term>
                        <symbol> + </symbol>
                        <term>
                          <integerConstant> 4 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                  </statements>
                  <symbol> } </symbol>
                </ifStatement>
              </statements>
              <symbol> } </symbol>
              <keyword> else </keyword>
              <symbol> { </symbol>
              <statements>
                <ifStatement>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier kind="FIELD" type="boolean" index="7"> invert </identifier>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier kind="FIELD" type="int" index="0"> x </identifier>
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <identifier kind="FIELD" type="int" index="0"> x </identifier>
                        </term>
                        <symbol> - </symbol>
                        <term>
                          <integerConstant> 4 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                  </statements>
                  <symbol> } </symbol>
                  <keyword> else </keyword>
                  <symbol> { </symbol>
                  <statements>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier kind="FIELD" type="int" index="1"> y </identifier>
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <identifier kind="FIELD" type="int" index="1"> y </identifier>
                        </term>
                        <symbol> - </symbol>
                        <term>
                          <integerConstant> 4 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                  </statements>
                  <symbol> } </symbol>
                </ifStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier kind="FIELD" type="boolean" index="8"> positivex </identifier>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier kind="FIELD" type="boolean" index="7"> invert </identifier>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier kind="FIELD" type="int" index="1"> y </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier kind="FIELD" type="int" index="1"> y </identifier>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <integerConstant> 4 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
              <keyword> else </keyword>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier kind="FIELD" type="int" index="0"> x </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier kind="FIELD" type="int" index="0"> x </identifier>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <integerConstant> 4 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
          </statements>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
          <statements>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier kind="FIELD" type="boolean" index="7"> invert </identifier>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier kind="FIELD" type="int" index="1"> y </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier kind="FIELD" type="int" index="1"> y </identifier>
                    </term>
                    <symbol> - </symbol>
                    <term>
                      <integerConstant> 4 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
              <keyword> else </keyword>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier kind="FIELD" type="int" index="0"> x </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier kind="FIELD" type="int" index="0"> x </identifier>
                    </term>
                    <symbol> - </symbol>
                    <term>
                      <integerConstant> 4 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ~ </symbol>
              <term>
                <symbol> ( </symbol>
                <expression>
                  <term>
                    <identifier kind="FIELD" type="int" index="0"> x </identifier>
                  </term>
                  <symbol> &gt; </symbol>
                  <term>
                    <identifier kind="FIELD" type="int" index="10"> leftWall </identifier>
                  </term>
                </expression>
                <symbol> ) </symbol>
              </term>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier kind="FIELD" type="int" index="14"> wall </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <integerConstant> 1 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier kind="FIELD" type="int" index="0"> x </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier kind="FIELD" type="int" index="10"> leftWall </identifier>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ~ </symbol>
              <term>
                <symbol> ( </symbol>
                <expression>
                  <term>
                    <identifier kind="FIELD" type="int" index="0"> x </identifier>
                  </term>
                  <symbol> &lt; </symbol>
                  <term>
                    <identifier kind="FIELD" type="int" index="11"> rightWall </identifier>
                  </term>
                </expression>
                <symbol> ) </symbol>
              </term>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier kind="FIELD" type="int" index="14"> wall </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier kind="FIELD" type="int" index="0"> x </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier kind="FIELD" type="int" index="11"> rightWall </identifier>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ~ </symbol>
              <term>
                <symbol> ( </symbol>
                <expression>
                  <term>
                    <identifier kind="FIELD" type="int" index="1"> y </identifier>
                  </term>
                  <symbol> &gt; </symbol>
                  <term>
                    <identifier kind="FIELD" type="int" index="12"> topWall </identifier>
                  </term>
                </expression>
                <symbol> ) </symbol>
              </term>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier kind="FIELD" type="int" index="14"> wall </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <integerConstant> 3 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier kind="FIELD" type="int" index="1"> y </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier kind="FIELD" type="int" index="12"> topWall </identifier>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <symbol> ~ </symbol>
              <term>
                <symbol> ( </symbol>
                <expression>
                  <term>
                    <identifier kind="FIELD" type="int" index="1"> y </identifier>
                  </term>
                  <symbol> &lt; </symbol>
                  <term>
                    <identifier kind="FIELD" type="int" index="13"> bottomWall </identifier>
                  </term>
                </expression>
                <symbol> ) </symbol>
              </term>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier kind="FIELD" type="int" index="14"> wall </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <integerConstant> 4 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier kind="FIELD" type="int" index="1"> y </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier kind="FIELD" type="int" index="13"> bottomWall </identifier>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier kind="NONE" type="" index="0"> show </identifier>
          <symbol> ( </symbol>
          <expressionList>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <expression>
            <term>
              <identifier kind="FIELD" type="int" index="14"> wall </identifier>
            </term>
          </expression>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <subroutineDec VarCount=5>
    <keyword> method </keyword>
    <keyword> void </keyword>
    <identifier kind="NONE" type="void" index="0"> bounce </identifier>
    <symbol> ( </symbol>
    <parameterList>
      <keyword> int </keyword>
      <identifier kind="ARG" type="int" index="1"> bouncingDirection </identifier>
    </parameterList>
    <symbol> ) </symbol>
    <subroutineBody>
      <symbol> { </symbol>
      <varDec>
        <keyword> var </keyword>
        <keyword> int </keyword>
        <identifier kind="VAR" type="int" index="0"> newx </identifier>
        <symbol> , </symbol>
        <identifier kind="VAR" type="int" index="1"> newy </identifier>
        <symbol> , </symbol>
        <identifier kind="VAR" type="int" index="2"> divLengthx </identifier>
        <symbol> , </symbol>
        <identifier kind="VAR" type="int" index="3"> divLengthy </identifier>
        <symbol> , </symbol>
        <identifier kind="VAR" type="int" index="4"> factor </identifier>
        <symbol> ; </symbol>
      </varDec>
      <statements>
        <letStatement>
          <keyword> let </keyword>
          <identifier kind="VAR" type="int" index="2"> divLengthx </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier kind="FIELD" type="int" index="2"> lengthx </identifier>
            </term>
            <symbol> / </symbol>
            <term>
              <integerConstant> 10 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <letStatement>
          <keyword> let </keyword>
          <identifier kind="VAR" type="int" index="3"> divLengthy </identifier>
          <symbol> = </symbol>
          <expression>
            <term>
              <identifier kind="FIELD" type="int" index="3"> lengthy </identifier>
            </term>
            <symbol> / </symbol>
            <term>
              <integerConstant> 10 </integerConstant>
            </term>
          </expression>
          <symbol> ; </symbol>
        </letStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier kind="ARG" type="int" index="1"> bouncingDirection </identifier>
            </term>
            <symbol> = </symbol>
            <term>
              <integerConstant> 0 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier kind="VAR" type="int" index="4"> factor </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <integerConstant> 10 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
          <statements>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <symbol> ~ </symbol>
                      <term>
                        <symbol> ( </symbol>
                        <expression>
                          <term>
                            <identifier kind="FIELD" type="int" index="2"> lengthx </identifier>
                          </term>
                          <symbol> &lt; </symbol>
                          <term>
                            <integerConstant> 0 </integerConstant>
                          </term>
                        </expression>
                        <symbol> ) </symbol>
                      </term>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
                <symbol> &amp; </symbol>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier kind="ARG" type="int" index="1"> bouncingDirection </identifier>
                    </term>
                    <symbol> = </symbol>
                    <term>
                      <integerConstant> 1 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
                <symbol> | </symbol>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier kind="FIELD" type="int" index="2"> lengthx </identifier>
                    </term>
                    <symbol> &lt; </symbol>
                    <term>
                      <integerConstant> 0 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
                <symbol> &amp; </symbol>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier kind="ARG" type="int" index="1"> bouncingDirection </identifier>
                    </term>
                    <symbol> = </symbol>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <symbol> - </symbol>
                          <term>
                            <integerConstant> 1 </integerConstant>
                          </term>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier kind="VAR" type="int" index="4"> factor </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <integerConstant> 20 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
              <keyword> else </keyword>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier kind="VAR" type="int" index="4"> factor </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <integerConstant> 5 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <ifStatement>
          <keyword> if </keyword>
          <symbol> ( </symbol>
          <expression>
            <term>
              <identifier kind="FIELD" type="int" index="14"> wall </identifier>
            </term>
            <symbol> = </symbol>
            <term>
              <integerConstant> 1 </integerConstant>
            </term>
          </expression>
          <symbol> ) </symbol>
          <symbol> { </symbol>
          <statements>
            <letStatement>
              <keyword> let </keyword>
              <identifier kind="VAR" type="int" index="0"> newx </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <integerConstant> 506 </integerConstant>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier kind="VAR" type="int" index="1"> newy </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier kind="VAR" type="int" index="3"> divLengthy </identifier>
                    </term>
                    <symbol> * </symbol>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <symbol> - </symbol>
                          <term>
                            <integerConstant> 50 </integerConstant>
                          </term>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
                <symbol> / </symbol>
                <term>
                  <identifier kind="VAR" type="int" index="2"> divLengthx </identifier>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
            <letStatement>
              <keyword> let </keyword>
              <identifier kind="VAR" type="int" index="1"> newy </identifier>
              <symbol> = </symbol>
              <expression>
                <term>
                  <identifier kind="FIELD" type="int" index="1"> y </identifier>
                </term>
                <symbol> + </symbol>
                <term>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier kind="VAR" type="int" index="1"> newy </identifier>
                    </term>
                    <symbol> * </symbol>
                    <term>
                      <identifier kind="VAR" type="int" index="4"> factor </identifier>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                </term>
              </expression>
              <symbol> ; </symbol>
            </letStatement>
          </statements>
          <symbol> } </symbol>
          <keyword> else </keyword>
          <symbol> { </symbol>
          <statements>
            <ifStatement>
              <keyword> if </keyword>
              <symbol> ( </symbol>
              <expression>
                <term>
                  <identifier kind="FIELD" type="int" index="14"> wall </identifier>
                </term>
                <symbol> = </symbol>
                <term>
                  <integerConstant> 2 </integerConstant>
                </term>
              </expression>
              <symbol> ) </symbol>
              <symbol> { </symbol>
              <statements>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier kind="VAR" type="int" index="0"> newx </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <integerConstant> 0 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier kind="VAR" type="int" index="1"> newy </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <identifier kind="VAR" type="int" index="3"> divLengthy </identifier>
                        </term>
                        <symbol> * </symbol>
                        <term>
                          <integerConstant> 50 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                    <symbol> / </symbol>
                    <term>
                      <identifier kind="VAR" type="int" index="2"> divLengthx </identifier>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
                <letStatement>
                  <keyword> let </keyword>
                  <identifier kind="VAR" type="int" index="1"> newy </identifier>
                  <symbol> = </symbol>
                  <expression>
                    <term>
                      <identifier kind="FIELD" type="int" index="1"> y </identifier>
                    </term>
                    <symbol> + </symbol>
                    <term>
                      <symbol> ( </symbol>
                      <expression>
                        <term>
                          <identifier kind="VAR" type="int" index="1"> newy </identifier>
                        </term>
                        <symbol> * </symbol>
                        <term>
                          <identifier kind="VAR" type="int" index="4"> factor </identifier>
                        </term>
                      </expression>
                      <symbol> ) </symbol>
                    </term>
                  </expression>
                  <symbol> ; </symbol>
                </letStatement>
              </statements>
              <symbol> } </symbol>
              <keyword> else </keyword>
              <symbol> { </symbol>
              <statements>
                <ifStatement>
                  <keyword> if </keyword>
                  <symbol> ( </symbol>
                  <expression>
                    <term>
                      <identifier kind="FIELD" type="int" index="14"> wall </identifier>
                    </term>
                    <symbol> = </symbol>
                    <term>
                      <integerConstant> 3 </integerConstant>
                    </term>
                  </expression>
                  <symbol> ) </symbol>
                  <symbol> { </symbol>
                  <statements>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier kind="VAR" type="int" index="1"> newy </identifier>
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <integerConstant> 250 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier kind="VAR" type="int" index="0"> newx </identifier>
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                              <identifier kind="VAR" type="int" index="2"> divLengthx </identifier>
                            </term>
                            <symbol> * </symbol>
                            <term>
                              <symbol> ( </symbol>
                              <expression>
                                <term>
                                  <symbol> - </symbol>
                                  <term>
                                    <integerConstant> 25 </integerConstant>
                                  </term>
                                </term>
                              </expression>
                              <symbol> ) </symbol>
                            </term>
                          </expression>
                          <symbol> ) </symbol>
                        </term>
                        <symbol> / </symbol>
                        <term>
                          <identifier kind="VAR" type="int" index="3"> divLengthy </identifier>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier kind="VAR" type="int" index="0"> newx </identifier>
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <identifier kind="FIELD" type="int" index="0"> x </identifier>
                        </term>
                        <symbol> + </symbol>
                        <term>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                              <identifier kind="VAR" type="int" index="0"> newx </identifier>
                            </term>
                            <symbol> * </symbol>
                            <term>
                              <identifier kind="VAR" type="int" index="4"> factor </identifier>
                            </term>
                          </expression>
                          <symbol> ) </symbol>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                  </statements>
                  <symbol> } </symbol>
                  <keyword> else </keyword>
                  <symbol> { </symbol>
                  <statements>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier kind="VAR" type="int" index="1"> newy </identifier>
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <integerConstant> 0 </integerConstant>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier kind="VAR" type="int" index="0"> newx </identifier>
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                              <identifier kind="VAR" type="int" index="2"> divLengthx </identifier>
                            </term>
                            <symbol> * </symbol>
                            <term>
                              <integerConstant> 25 </integerConstant>
                            </term>
                          </expression>
                          <symbol> ) </symbol>
                        </term>
                        <symbol> / </symbol>
                        <term>
                          <identifier kind="VAR" type="int" index="3"> divLengthy </identifier>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                    <letStatement>
                      <keyword> let </keyword>
                      <identifier kind="VAR" type="int" index="0"> newx </identifier>
                      <symbol> = </symbol>
                      <expression>
                        <term>
                          <identifier kind="FIELD" type="int" index="0"> x </identifier>
                        </term>
                        <symbol> + </symbol>
                        <term>
                          <symbol> ( </symbol>
                          <expression>
                            <term>
                              <identifier kind="VAR" type="int" index="0"> newx </identifier>
                            </term>
                            <symbol> * </symbol>
                            <term>
                              <identifier kind="VAR" type="int" index="4"> factor </identifier>
                            </term>
                          </expression>
                          <symbol> ) </symbol>
                        </term>
                      </expression>
                      <symbol> ; </symbol>
                    </letStatement>
                  </statements>
                  <symbol> } </symbol>
                </ifStatement>
              </statements>
              <symbol> } </symbol>
            </ifStatement>
          </statements>
          <symbol> } </symbol>
        </ifStatement>
        <doStatement>
          <keyword> do </keyword>
          <identifier kind="NONE" type="" index="0"> setDestination </identifier>
          <symbol> ( </symbol>
          <expressionList>
            <expression>
              <term>
                <identifier kind="VAR" type="int" index="0"> newx </identifier>
              </term>
            </expression>
            <symbol> , </symbol>
            <expression>
              <term>
                <identifier kind="VAR" type="int" index="1"> newy </identifier>
              </term>
            </expression>
          </expressionList>
          <symbol> ) </symbol>
          <symbol> ; </symbol>
        </doStatement>
        <returnStatement>
          <keyword> return </keyword>
          <symbol> ; </symbol>
        </returnStatement>
      </statements>
      <symbol> } </symbol>
    </subroutineBody>
  </subroutineDec>
  <symbol> } </symbol>
</class>
